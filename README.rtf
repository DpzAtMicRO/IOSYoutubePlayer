{\rtf1\ansi\ansicpg1252\cocoartf1187\cocoasubrtf370
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fswiss\fcharset0 Helvetica;\f2\fnil\fcharset0 Consolas;
\f3\fswiss\fcharset0 ArialMT;}
{\colortbl;\red255\green255\blue255;\red0\green116\blue0;\red38\green38\blue38;\red52\green110\blue183;
\red246\green246\blue246;\red196\green26\blue22;\red63\green110\blue116;\red46\green13\blue110;\red38\green71\blue75;
\red92\green38\blue153;\red170\green13\blue145;\red100\green56\blue32;\red217\green11\blue0;\red52\green52\blue52;
\red249\green249\blue249;\red58\green88\blue111;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid1\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab529
\pard\tx529\pardeftab529\pardirnatural

\f0\fs22 \cf0 \CocoaLigature0 \
\cf2 ---------- \cf0 IOSYoutubePlayer\
\cf2 ----------\cf0 \
\cf2 ----------\cf0 Created by DpzAtMicRO on 14/03/13.\cf2 \
\

\fs20 \cf0 IOSYoutubePlayer allows you to play youtube videos directly on your device using MPMoviePlayer.\
MPMoviePlayer \
\
\pard\pardeftab720\sa300

\f1\b\fs60 \cf3 \CocoaLigature1 IOSYoutubePlayer\
\pard\pardeftab720

\fs48 \cf4 \
\pard\pardeftab720\sa300
\cf3 About\
\pard\pardeftab720\sl500\sa300

\b0\fs30 \cf3 IOSYoutubePlayer allows you to play youtube videos directly on iOS device using 
\f2\fs24 \cf3 \cb5 MPMoviePlayerController
\f1\fs30 \cf3 \cb1 . \
It just loads the HTML code of YouTube's mobile website and looks for the data in the script tag. IOSYoutubePlayer doesn't use a 
\f2\fs24 \cf3 \cb5 UIWebView
\f1\fs30 \cf3 \cb1  , which is a common practice seen in most youtube players for iOS.
\b\fs48 \cf4 \
\pard\pardeftab720\sa300
\cf3 Installation\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl500
\ls1\ilvl0
\b0\fs30 \cf3 {\listtext	1.	}Add the 
\f2\fs24 \cb5 IOSYoutubePlayer
\f1\fs30 \cb1  folder into your project.\
{\listtext	2.	}Import the 
\f2\fs24 \cb5 MediaPlayer.framework
\f1\fs30 \cb1 .\
{\listtext	3.	}Import 
\f0\fs22 \cf6 \CocoaLigature0 LBYouTubePlayerViewController.h 
\f1\fs30 \cf3 \CocoaLigature1 to the view controller from which you want to make the call to play video.\
{\listtext	4.	}If you are using ARC, handle the issue with JSONKit.m , disable ARC.\
\pard\pardeftab720

\b\fs36 \cf4 	\
\pard\pardeftab720\sa300
\cf3 Example\
\pard\tx529\pardeftab529\pardirnatural

\f0\b0\fs22 \cf0 \CocoaLigature0 // initiate the call:\
\
\pard\tx529\pardeftab529\pardirnatural
\cf7 LBYouTubePlayerViewController\cf0  *lbYoutubePlayerVC = [[\cf7 LBYouTubePlayerViewController\cf0  \cf8 alloc\cf0 ]\cf9 initWithYouTubeURL\cf0 :[\cf10 NSURL\cf0  \cf8 URLWithString\cf0 :\cf6 @"http://www.youtube.com/watch?v=zkgUTQyvoZY"\cf0 ] \cf9 quality\cf0 :\cf9 LBYouTubeVideoQualityLarge\cf0 ];\
\cf7 lbYoutubePlayerVC\cf0 .\cf7 delegate\cf0 =\cf11 self\cf0 ;\
\
Implement the \cf12 LBYouTubePlayerControllerDelegate\cf0  methods:\
In:\
-(\cf11 void\cf0 )youTubePlayerViewController:(\cf7 LBYouTubePlayerViewController\cf0  *)controller didSuccessfullyExtractYouTubeURL:(\cf10 NSURL\cf0  *)videoURL\
\{\
    \cf10 MPMoviePlayerViewController *\cf7 moviePlayerViewController\cf0  = [[\cf10 MPMoviePlayerViewController\cf0  \cf8 alloc\cf0 ]   \cf8 initWithContentURL\cf0 :videoURL];\
    [\cf7 moviePlayerViewController\cf0 .\cf10 moviePlayer\cf0  \cf8 prepareToPlay\cf0 ];\
    [\cf7 moviePlayerViewController\cf0 .\cf10 moviePlayer\cf0  \cf8 play\cf0 ];\
    [\cf11 self\cf0  \cf8 presentModalViewController\cf0 :\cf7 moviePlayerViewController\cf0  \cf8 animated\cf0 :\cf11 YES\cf0 ];\
\}\
\pard\tx529\pardeftab529\pardirnatural

\f1\b\fs48 \cf4 \CocoaLigature1 \
\pard\pardeftab720\sa300
\cf3 Requirements\
\pard\pardeftab720\sl500\sa300

\b0\fs30 \cf3 IOSYoutubePlayer requires iOS 4 or later and is compatible with ARC environment.\
\pard\pardeftab720

\b\fs48 \cf4 \
\pard\pardeftab720\sa300
\cf3 License\
\pard\pardeftab720\sl500\sa300

\b0\fs30 \cf3 IOSYoutubePlayer is licensed under the {\field{\*\fldinst{HYPERLINK "http://opensource.org/licenses/mit-license.php"}}{\fldrslt \cf4 MIT License}}.\
\pard\pardeftab720

\b\fs48 \cf4 \
\pard\pardeftab720
\cf13 ALERT!! > To Be Noted\
\cf3 \
\pard\pardeftab720\sl340

\f3\b0\fs28 \cf14 \cb15 This can be against YouTube's ToS, unfortunately. If you do this, you can only expect your app to work for as long as YouTube is unaware of what you are doing. From docs,\
\pard\pardeftab720\sl340
{\field{\*\fldinst{HYPERLINK "https://developers.google.com/youtube/terms"}}{\fldrslt \cf16 \cb1 developers.google.com/youtube/terms}}\cf14 \cb1 , Section 2 (Prohibitions), 10. access any portion of any YouTube audiovisual content by any means other than use of a YouTube player or other video player expressly authorized by YouTube; #7 and #8 might also be relevant\
\pard\pardeftab720\sl340
\cf14 \cb15 I had contacted the  YouTube API team a while back as well to ask if it would be ok for me to parse the video URL out myself; this is a quote from the reply I got: "The only mechanism supported is the iframe embed. Raw stream access is not supported by our ToS other than the low res RTSP streams we provide for feature phones"
\f1 \cf3 \cb1 \
\pard\pardeftab720\sl500
\cf3 So use it on your own risk. All that I can guarantee is it works well now, and can't promise for future reference.\
}